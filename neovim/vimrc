"--------------------------------------------------------------------------------------------------
" These are common keyboard shortcuts to remind myself
" <C-n> multiple cursors, <C-n> again to go to next, <C-x> to remove current cursor
" <Shift+i> toggle hidden files in NERDTree
" [count]\cc, comments out current line or count lines
" [count]\cu, uncomments the current line or count lines
" [count]<leader>c<space> Toggles the comment state of the lines
"--------------------------------------------------------------------------------------------------

" ---------------------------------- Plugin installer configurations ------------------------------

" Automate the process of installing vim-plug when required
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
     \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins will be downloaded under the specified directory
call plug#begin('~/.vim/plugged')

" Declare the list of plugins
Plug 'joshdick/onedark.vim'
Plug 'sjl/badwolf'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'sheerun/vim-polyglot'
Plug 'vim-python/python-syntax'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'terryma/vim-multiple-cursors'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'ryanoasis/vim-devicons'
Plug 'Yggdroot/indentLine'
Plug 'junegunn/goyo.vim'
Plug 'dkprice/vim-easygrep'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'inside/vim-search-pulse'
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-fugitive'

Plug 'junegunn/fzf.vim'
Plug '~/.fzf'

Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

" Plug 'mhinz/vim-startify'
" Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}
" Plug 'ervandew/supertab'

" List ends here. Plugins become visible to Vim after this call
call plug#end()

" --------------------------------------- Utility Functions ---------------------------------------

" Function to zoom-in and zoom-out from a window
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction

" Function to trim trailing whitespace
" https://vi.stackexchange.com/a/456
function! TrimTrailWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfunction

" Function to make a whole word search faster
function! SearchWord(word)
    let @/ = '\<' . a:word . '\>'
    normal n
endfunction

" ------------------------------------- General Configurations ------------------------------------

" Syntax highlighting
syntax on
silent! colorscheme onedark
" silent! colorscheme badwolf
"highlight LineNr term=bold cterm=None ctermfg=Red ctermbg=None

" Set true colors inside neovim
set termguicolors

" Highlight the current line and also highlight the column @120 (ruler)
set colorcolumn=120
highlight colorcolumn ctermbg=black
set cursorline

" This displays the line numbers and controls the number of columns used for the line number
set number
set numberwidth=1

" Insert spaces when <Tab> is pressed. With this option set, if you want to enter a real tab character use Ctrl-V<Tab>
" key sequence
set expandtab

" Controls the number of space characters inserted when pressing the tab key
set tabstop=4

" Controls the number of space characters inserted for identation
set shiftwidth=4

" This makes searches case insensitive
set ignorecase

" This makes searches with a single capital letter to be case sensitive
set smartcase

" This highlights the search pattern as you type
set incsearch

" Open windows always below or right
set splitbelow
set splitright

" Set the maximum text width before vim automatically wraps it
set textwidth=120

" Set default encoding
set encoding=UTF-8

" This is used to control the Ctrl + C command and copy to the system's clipboard
" set clipboard+=unnamedplus
set clipboard^=unnamed,unnamedplus

" Format options configuration:
" 't' is required in format options to wrap text in insert mode
" if a line is longer than textwidth it may not be wraped if 'l' is in format options
" Disable <CR> key from autocommenting when pressing enter in a commented line
autocmd BufEnter * set fo+=t fo-=r

" Remove trailing whitespaces on file save
autocmd BufWritePre * :call TrimTrailWhitespace()

" This is used to preserve the clipboard when vim exits
autocmd VimLeave * call system("xclip -selection clipboard -i", getreg("+"))

" Close NERDTree automatically when it is the only window left open
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Groupped configurations of :term
augroup TerminalConfigs
    " Clear old autocommands of this group
    autocmd!
    " Automatically enter in insert mode when in terminal pane
    autocmd TermOpen,BufEnter,WinEnter * if &buftype == 'terminal' | :startinsert | endif
    " Disable linenumbering when in terminal
    autocmd TermOpen * setlocal nonumber norelativenumber
augroup END

" Change linenumber coloring to white for onedark
augroup colorset
    " Clear old autocommands of this group
    autocmd!
    let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16" : "7" }
    autocmd ColorScheme * call onedark#set_highlight("LineNr", { "fg": s:white })
augroup END

" Open NERDTree automatically when vim starts
"autocmd vimenter * NERDTree
"

" Nerd Commenter configuration options
" -------------------------------------
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims=1

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines=1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace=1

" Goyo distraction free mode configuration options
" ------------------------------------------------
let g:goyo_width="80%"
let g:goyo_height="85%"
let g:goyo_linenr=0

" Vim-Signify configuration options
" ---------------------------------
" Change the delete sign of git-signify from '_' to '-'
let g:signify_sign_delete='-'

" Airline configuration options
" -----------------------------
" Change airline theme
let g:airline_theme='onedark'

" Enable tabline extension
let g:airline#extensions#tabline#enabled=1

" Add powerline fonts to populate powerline symbols
let g:airline_powerline_fonts=1

" Change the tabline separators
" let g:airline#extensions#tabline#left_sep=' '
" let g:airline#extensions#tabline#left_alt_sep='|'

" Deoplete configuration options
" ------------------------------
" Enable deoplete autocompletion
let g:deoplete#enable_at_startup=1

" EasyGrep configuration options
" ------------------------------
" Make EasyGrep search only in the current buffer
let g:EasyGrepMode=1
let g:EasyGrepSearchCurrentBufferOnly=1
let g:EasyGrepIgnoreCase=0

" ------------------------------------------ Keybindings ------------------------------------------

" Toggle line numbers
nnoremap <silent> <leader>l :set nu!<CR>

" Toggle Goyo - distraction free writing
nnoremap <silent> <F1> :Goyo<CR>
nnoremap <silent> <leader>1 :Goyo<CR>

" Toggle between folds
nnoremap <expr> <F2> &foldlevel ? 'zM' :'zR'

" Set this keyboard combination to toggle NERDTree, it's the same as Sublime Text 3
map <silent> <C-k><C-b> :NERDTreeToggle<CR>

" Set Ctrl-t to jump to next occurence of the word under cursor
nnoremap <silent> <C-t> *

" Keybinds to move lines like sublime text 3
" https://vim.fandom.com/wiki/Moving_lines_up_or_down
" gv=gv re-selects the visual block after each operation
nnoremap <silent> <C-S-Up> :m-2<CR>
nnoremap <silent> <C-S-Down> :m+<CR>
inoremap <silent> <C-S-Up> <Esc>:m-2<CR>
inoremap <silent> <C-S-Down> <Esc>:m+<CR>
vnoremap <silent> <C-S-Up> :m '<-2<CR>gv=gv
vnoremap <silent> <C-S-Down> :m '>+1<CR>gv=gv

" Duplicate the current line
" 'm' sets a mark that we can return afterwards by using '`' followed by the mark's name
" :normal properly handles a [count] prepended before the command e.g. 3w, 5d etc
" http://vimcasts.org/episodes/creating-mappings-that-accept-a-count/
nnoremap <leader>d  :normal m`yyp``<CR>
inoremap <leader>d <Esc>m`yyp``<CR>A
vnoremap <leader>d <Esc>m`yyp``<CR>

" Hitting ESC when inside a :term to get into normal mode
tnoremap <Esc> <C-\><C-N>

" Insert a blank line with <leader>Enter without leaving normal mode
nnoremap <silent> <leader><CR> o<Esc>

" Save files with ctrl+s in every mode
nnoremap <C-s> :w<CR>
inoremap <C-s> <Esc>:w<CR>
vnoremap <C-s> <Esc>:w<CR>

" Keymaps to quit current buffer with ctrl+q
nnoremap <silent> <C-q> <Esc>:q<CR>
inoremap <silent> <C-q> <Esc>:q<CR>
vnoremap <silent> <C-q> <Esc>:q<CR>

" Keymap to quit all buffers with shift+q
nnoremap <silent> <S-q> <Esc>:qa<CR>

" Easiliy toggle comments @NERDCommenter
map <leader><leader> <leader>c<Space><CR>

" Toggling comment in insert mode keeps insert mode :startinsert
imap <leader><leader> <Esc><leader>c<Space>:startinsert<CR>

" Clear highlighting with escape when in normal mode
" https://stackoverflow.com/a/1037182/6654329
nnoremap <silent> <Esc> :noh<return><Esc>
nnoremap <silent> <Esc>^[ <Esc>^[

" Keymap to source the vimrc automatically
nnoremap <silent> <leader>sc :source $MYVIMRC<CR>

" Commands/Keymaps to open terminals horizontally and vertically
command! -nargs=* HT split  | terminal <args>
command! -nargs=* VT vsplit | terminal <args>

nnoremap <silent> <leader>ht :HT<CR>
nnoremap <silent> <leader>vt :VT<CR>

" Make the whole-word search proc with <leader>/
command! -nargs=1 SearchWord call SearchWord(<f-args>)
nnoremap <leader>/ :SearchWord

" Command and key mapping to enable the zoom-in and zoom-out
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <leader>z :ZoomToggle<CR>

" Add mouse support and change the default mouse scrolling wheel options
set mouse=a
nnoremap <ScrollWheelUp>   4<C-y>
nnoremap <ScrollWheelDown> 4<C-e>
xnoremap <ScrollWheelUp>   4<C-y>
xnoremap <ScrollWheelDown> 4<C-e>

" Git-signify keybinds to use the plugin more easily
nnoremap <silent> <leader>gh :SignifyToggleHighlight<CR>
nnoremap <silent> <leader>gf :SignifyFold<CR>
nnoremap <silent> <leader>gd :SignifyDiff<CR>

" Deoplete keybindings
" --------------------
" Use <Tab> and <S-Tab> to navigate through the autocomplete options
inoremap <silent> <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <silent> <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Don't insert a newline after choosing an option with <Enter>
inoremap <silent> <expr> <CR>    pumvisible() ? "\<C-y>" : "\<CR>"

" ---------------------------------------- COC Intelisense ----------------------------------------
" source ~/.vim/coc/coc.config.vim

" ----------------------------------- FZF Plugins Configuration -----------------------------------
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)

function! RipgrepFzf(query, fullscreen)
    let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)

# ------------------ Fuzzy Configuration Options ------------------- #
FZF_COMMON_OPTIONS="
    --bind='?:toggle-preview'
    --bind='ctrl-u:preview-page-up'
    --bind='ctrl-d:preview-page-down'
    --height='80%'
    --multi
    --layout=reverse
    --border
    --preview-window 'right:50%:hidden:wrap'
    --preview '([[ -d {} ]] && tree -C {}) || ([[ -f {} ]] && bat --style=full --color=always {}) || echo {}'"

command -v bat > /dev/null && command -v tree > /dev/null && export FZF_DEFAULT_OPTS="$FZF_COMMON_OPTIONS"
command -v fd  > /dev/null && export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
command -v fd  > /dev/null && export FZF_ALT_C_COMMAND='fd . $HOME --type d --hidden --follow --exclude .git'
command -v fd  > /dev/null && export FZF_CTRL_T_COMMAND='fd . $HOME --type f --type d --hidden --follow --exclude .git'

# ------------------------ Helper Functions ------------------------ #
# --------- https://github.com/junegunn/fzf/wiki/examples ---------- #

# fo - Fuzzy open files
# Keybinds:
# -- <Ctrl>-o to open with `subl` command i.e. Sublime Text 3
# -- <Ctrl>-e or Enter key to open with the $EDITOR
fo() {
    local out file key
    local IFS=$'\n'
    out=("$(fzf --query="$1" --exit-0 --expect=ctrl-o,enter)")
    key=$(head -1 <<< "$out")
    file=$(head -2 <<< "$out" | tail -1)
    if [ -n "$file" ]; then
        [ "$key" = ctrl-o ] && subl "$file" || ${EDITOR} "$file"
    fi
}

# vf - Fuzzy open with vim from anywhere
fv() {
    local files
    files=(${(f)"$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1 -m)"})
    if [[ -n $files ]]; then
        nvim -- $files
        print -l $files[1]
    fi
}

# fkill - Fuzzy kill processes, list only the ones you can kill
fkill() {
    local pid
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi
    if [ "x$pid" != "x" ]; then
        echo $pid | xargs kill -${1:-9}
    fi
}

# cd - Like normal cd but opens an interactive navigation window when called with no arguments
cd() {
    if [[ "$#" != 0 ]]; then
        builtin cd "$@";
        return
    fi
    while true; do
        local lsd=$(echo ".." && ls -p | grep '/$' | sed 's;/$;;')
        local dir="$(printf '%s\n' "${lsd[@]}" |
            fzf --ansi --reverse --preview '
                __cd_nxt="$(echo {})";
                __cd_path="$(echo $(pwd)/${__cd_nxt} | sed "s;//;/;")";
                echo $__cd_path;
                echo;
                ls -p --color=always "${__cd_path}";
        ')"
        [[ ${#dir} != 0 ]] || return 0
        builtin cd "$dir" &> /dev/null
    done
}

# z - like normal z when used with arguments but displays an fzf prompt when used without
unalias z 2> /dev/null
z() {
    if [ $# -gt 0 ]; then
        _z "$*"
        return
    fi
    cd "$(_z -l 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" \
    | sed 's/^[0-9,.]* *//')"
}

# fman - Quickly search for man pages through fzf
#  -- if arguments are supplied it will open the first argument's man page with fzf piped
fman() {
    if [ "$#" -gt 0 ]; then
        man "$1" | fzf
    else
        man -k . | fzf --prompt='Man> ' | awk '{print $1}' | xargs -r man
    fi
}

# fh - Fuzzy find a command from history and evaluate it
fh() {
    eval \
    $(([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -r 's/ *[0-9]*\*? *//' | sed -r 's/\\/\\\\/g')
}

# frg - Use ripgrep (rg) with fuzzy finder
frg() {
    if [ ! "$#" -gt 0 ]; then
        echo "You need to supply a string to search for."
        return 1
    fi
    rg --files-with-matches --no-messages "$1" |
    fzf --preview "highlight -O ansi -l {} 2> /dev/null |
    rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' ||
    rg --ignore-case --pretty --context 10 '$1' {}"
}

# flog - Use fzf with commit log history
# Keybinds:
# -- <Enter> shows the git diff
# -- <Alt>-y copy the commit's hash
flog() {
    local _gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
    local _viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"
    local _header=$'Keybinds:\n  -- <Enter>: to view git diff\n  -- <Alt>-y: to copy commit\'s hash'

    git log --graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@" |
    fzf --exact --ansi --no-multi --no-sort --reverse --tiebreak=index \
        --preview="$_viewGitLogLine" \
        --header  $_header \
        --bind "enter:execute:$_viewGitLogLine   | less -R" \
        --bind "alt-y:execute:$_gitLogLineToHash | xclip -selection clipboard"
}

# falias - Search for aliases with fzf
falias() {
    alias | fzf
}
